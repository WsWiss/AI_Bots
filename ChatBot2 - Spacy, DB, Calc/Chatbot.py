import datetime
import asyncio
import random
import re
import aiohttp
import webbrowser
from urllib.parse import quote
import spacy
from textblob import TextBlob
import sqlite3
import pymorphy2

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ü–≤–µ—Ç–æ–≤ (ANSI)
COLORS = {
    "blue": "\033[94m",
    "green": "\033[92m",
    "yellow": "\033[93m",
    "red": "\033[91m",
    "bold": "\033[1m",
    "underline": "\033[4m",
    "end": "\033[0m",
}

# –ó–∞–≥—Ä—É–∑–∫–∞ spaCy –º–æ–¥–µ–ª–∏
try:
    nlp = spacy.load("ru_core_news_sm")
except OSError:
    print(f"{COLORS['yellow']}–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å ru_core_news_sm...{COLORS['end']}")
    from spacy.cli import download
    download("ru_core_news_sm")
    nlp = spacy.load("ru_core_news_sm")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_KEY = "7dd0df264a23133ea2050760446d22d5"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á OpenWeatherMap

# –°–ª–æ–≤–∞—Ä—å —à–∞–±–ª–æ–Ω–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
RESPONSES = {
    r"–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç\??": [
        f"{COLORS['blue']}–Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ‚Äî –ë–æ—Ç-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç!{COLORS['end']}",
        f"{COLORS['blue']}–ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç, —Ä–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!{COLORS['end']}",
        f"{COLORS['blue']}–Ø ‚Äî –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑—ã–≤–∞–π—Ç–µ –º–µ–Ω—è –ë–æ—Ç.{COLORS['end']}"
    ],
    r"–∫–∞–∫ –¥–µ–ª–∞\??": [
        f"{COLORS['green']}–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª–∏! üòä{COLORS['end']}",
        f"{COLORS['green']}–†–∞–±–æ—Ç–∞—é –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!{COLORS['end']}",
        f"{COLORS['green']}–ö–∞–∫ —É —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å—É—â–µ—Å—Ç–≤–∞ ‚Äî –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ê —É –≤–∞—Å?{COLORS['end']}"
    ],
    r"—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å\??": [
        f"""{COLORS['blue']}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  {COLORS['bold']}–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:{COLORS['end']}{COLORS['blue']}           ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë ‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã            ‚ïë
‚ïë ‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ  ‚ïë
‚ïë ‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É              ‚ïë
‚ïë ‚Ä¢ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã  ‚ïë
‚ïë ‚Ä¢ –í—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{COLORS['end']}""",
        f"""{COLORS['blue']}–Ø –º–æ–≥—É:
  ‚Ä¢ {COLORS['underline']}–ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é{COLORS['end']}{COLORS['blue']} –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
  ‚Ä¢ {COLORS['underline']}–†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ñ–∞–∫—Ç—ã{COLORS['end']}{COLORS['blue']} –æ —Å–ø–æ—Ä—Ç–µ, –∏—Å—Ç–æ—Ä–∏–∏, –∫–æ—Å–º–æ—Å–µ
  ‚Ä¢ {COLORS['underline']}–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É{COLORS['end']}{COLORS['blue']} –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ
  ‚Ä¢ {COLORS['underline']}–†–µ—à–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã{COLORS['end']}{COLORS['blue']} —Ç–∏–ø–∞ 2+2 –∏–ª–∏ 5*10{COLORS['end']}"""
    ],
    r"—Å–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è\??": lambda: f"{COLORS['yellow']}‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.datetime.now().strftime('%H:%M:%S')}{COLORS['end']}",
    r"–∫–∞–∫–æ–µ —Å–µ–≥–æ–¥–Ω—è —á–∏—Å–ª–æ\??": lambda: f"{COLORS['yellow']}üìÖ –°–µ–≥–æ–¥–Ω—è: {datetime.date.today().strftime('%d.%m.%Y')}{COLORS['end']}",
    r"—Ä–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —à—É—Ç–∫—É": [
        f"""{COLORS['blue']}–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:{COLORS['end']}
  ‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏{COLORS['end']}
  ‚Ä¢ –ñ–∏–≤–æ—Ç–Ω—ã–µ{COLORS['end']}
  ‚Ä¢ –®–∫–æ–ª–∞{COLORS['end']}
  ‚Ä¢ –†–∞–±–æ—Ç–∞{COLORS['end']}""",
        f"{COLORS['blue']}–û –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –≤–∞–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ñ–∞–∫—Ç? (—Å–ø–æ—Ä—Ç/–∏—Å—Ç–æ—Ä–∏—è/–∫–æ—Å–º–æ—Å){COLORS['end']}"
    ],
    r"–µ—â–µ –æ–¥–∏–Ω —Ñ–∞–∫—Ç": [
        f"{COLORS['blue']}–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–∫—Ç–∞: (—Å–ø–æ—Ä—Ç/–∏—Å—Ç–æ—Ä–∏—è/–∫–æ—Å–º–æ—Å){COLORS['end']}",
        f"{COLORS['blue']}–ò–∑ –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω —Ñ–∞–∫—Ç?{COLORS['end']}"
    ],
    r"–ø–æ–∏—Å–∫\s(.+)": [
        f"{COLORS['yellow']}üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...{COLORS['end']}",
        f"{COLORS['yellow']}üåê –ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...{COLORS['end']}"
    ],
    r"–ø–æ–≥–æ–¥–∞\s+(?:–≤|–Ω–∞)\s+(.+)": [
        f"{COLORS['yellow']}‚õÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...{COLORS['end']}",
        f"{COLORS['yellow']}üå§Ô∏è –£–∑–Ω–∞—é —Ç–µ–∫—É—â–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è...{COLORS['end']}"
    ],
    r"\b–ø—Ä–∏–≤–µ—Ç\b": [
        f"{COLORS['green']}‚ú® –ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –ö–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?{COLORS['end']}",
        f"{COLORS['green']}üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?{COLORS['end']}",
        f"{COLORS['green']}üåü –ô–æ—É! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!{COLORS['end']}"
    ],
    r"\b–Ω–∞—Å—Ç–æ—è—â–∏–π\b|\b–∂–∏–≤–æ–π\b|\b—á–µ–ª–æ–≤–µ–∫\b": [
        f"{COLORS['blue']}ü§ñ –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π, –Ω–æ —Å –±–æ–ª—å—à–∏–º–∏ –∞–º–±–∏—Ü–∏—è–º–∏!{COLORS['end']}",
        f"{COLORS['blue']}üëæ –Ø —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –Ω–æ —É–∂–µ –ø–æ—á—Ç–∏ —á–µ–ª–æ–≤–µ–∫!{COLORS['end']}"
    ],
    r"\b—Å–ø–∞—Å–∏–±–æ\b|\b–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å\b": [
        f"{COLORS['green']}üå∏ –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â—ë!{COLORS['end']}",
        f"{COLORS['green']}üíñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –ß–µ–º –µ—â—ë –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?{COLORS['end']}"
    ],
    r"\b–ø–æ–∫–∞\b|\b—Å–≤–∏–¥–∞–Ω–∏—è\b": [
        f"{COLORS['blue']}üåà –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!{COLORS['end']}",
        f"{COLORS['blue']}üëã –ü–æ–∫–∞-–ø–æ–∫–∞! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ!{COLORS['end']}"
    ],
    r"\b–¥–µ–ª–æ\b|\b–Ω–æ–≤—ã–π\b": [
        f"{COLORS['green']}‚òÄÔ∏è –í—Å—ë –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å!{COLORS['end']}",
        f"{COLORS['green']}üöÄ –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–∞–¥–∞—á–∞–º!{COLORS['end']}"
    ],
    r"\b—É–º–µ—Ç—å\b": [
        f"""{COLORS['blue']}–ú–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:
  ‚Ä¢ {COLORS['underline']}–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏{COLORS['end']}{COLORS['blue']} –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
  ‚Ä¢ {COLORS['underline']}–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã{COLORS['end']}{COLORS['blue']}
  ‚Ä¢ {COLORS['underline']}–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è{COLORS['end']}{COLORS['blue']}
  ‚Ä¢ {COLORS['underline']}–ü–æ–≥–æ–¥–Ω—ã–µ —Å–≤–æ–¥–∫–∏{COLORS['end']}{COLORS['blue']}
  ‚Ä¢ {COLORS['underline']}–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã{COLORS['end']}{COLORS['blue']}{COLORS['end']}"""
    ],
}

# –°–ª–æ–≤–∞—Ä—å —Ñ–∞–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
JOKES = {
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": [
        f"üíª –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ª—é–±—è—Ç —Ç–∏—à–∏–Ω—É? –ü–æ—Ç–æ–º—É —á—Ç–æ –≤ –Ω–µ–π –Ω–µ—Ç –±–∞–≥–æ–≤.{COLORS['end']}",
        f"üñ±Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä –≥–æ–≤–æ—Ä–∏—Ç —Å —á–µ–ª–æ–≤–µ–∫–æ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ ‚Äî —è–∑—ã–∫–µ –æ—à–∏–±–æ–∫.{COLORS['end']}",
        f"üîã –ú–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∂–∏–≤—ë—Ç –¥–æ–ª—å—à–µ –º–µ–Ω—è‚Ä¶ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —è –µ–≥–æ –Ω–µ —Ç—Ä–æ–≥–∞—é.{COLORS['end']}"
    ],
    "–∂–∏–≤–æ—Ç–Ω—ã–µ": [
        f"üê∂ –ü–æ—á–µ–º—É —Å–æ–±–∞–∫–∞ —Å–∏–¥–∏—Ç —É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞? –û–Ω–∞ –∏—â–µ—Ç –∫–æ—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.{COLORS['end']}",
        f"üê± –ö–æ—Ç –ø—Ä–æ—Å–Ω—É–ª—Å—è, –ø–æ—Å–º–æ—Ç—Ä–µ–ª –Ω–∞ –±—É–¥–∏–ª—å–Ω–∏–∫ –∏ —Å–Ω–æ–≤–∞ –ª—ë–≥‚Ä¶ –º—É–¥—Ä–æ—Å—Ç—å –≤ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ.{COLORS['end']}",
        f"ü¶ú –ü–æ–ø—É–≥–∞–π –≤—ã—É—á–∏–ª ¬´–°–∫–æ—Ä—É—é –ø–æ–º–æ—â—å¬ª –∏ —Ç–µ–ø–µ—Ä—å –∑–≤–æ–Ω–∏—Ç —Ç—É–¥–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Ö–æ—á–µ—Ç —è–±–ª–æ–∫–æ.{COLORS['end']}"
    ],
    "—Ä–∞–±–æ—Ç–∞": [
        f"üìÖ –Ø –Ω–µ –ª–µ–Ω–∏–≤—ã–π ‚Äî —è –ø—Ä–æ—Å—Ç–æ –≤ —Ä–µ–∂–∏–º–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è.{COLORS['end']}",
        f"üïò –Ø –ª—é–±–ª—é –¥–µ–¥–ª–∞–π–Ω—ã. –û—Å–æ–±–µ–Ω–Ω–æ –∑–≤—É–∫, —Å –∫–æ—Ç–æ—Ä—ã–º –æ–Ω–∏ –ø—Ä–æ–ª–µ—Ç–∞—é—Ç –º–∏–º–æ.{COLORS['end']}",
        f"üíº –ö–æ–≥–¥–∞ —è –≥–æ–≤–æ—Ä–∏–ª, —á—Ç–æ –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º, —è –Ω–µ –∏–º–µ–ª –≤ –≤–∏–¥—É –≤–µ—Å—å –æ—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤.{COLORS['end']}"
    ],
    "—à–∫–æ–ª–∞": [
        f"üìö –£—á–∏–ª –≥–µ–æ–≥—Ä–∞—Ñ–∏—é –∏ —É–∑–Ω–∞–ª, —á—Ç–æ —è –¥–∞–ª–µ–∫–æ –Ω–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –º–∏—Ä–∞.{COLORS['end']}",
        f"üß™ –•–∏–º–∏—è ‚Äî —ç—Ç–æ –º–∞–≥–∏—è, –Ω–æ —Å –¥–≤–æ–π–∫–æ–π.{COLORS['end']}",
        f"üìù –≠–∫–∑–∞–º–µ–Ω ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± –¥–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–æ–º–Ω–∏–ª.{COLORS['end']}"
    ]
}

class Database:
    def __init__(self, db_name='users.db'):
        self.db_name = db_name
        self._create_table()

    def _get_connection(self):
        return sqlite3.connect(self.db_name)

    def _create_table(self):
        with self._get_connection() as conn:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    name TEXT,
                    city TEXT
                )
            ''')
            conn.commit()

    def add_user(self, name: str, city: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self._get_connection() as conn:
            conn.execute('INSERT INTO users (name, city) VALUES (?, ?)', (name, city))
            conn.commit()

    def get_all_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT id, name, city FROM users')
            return cursor.fetchall()

    def update_user(self, user_id=1, name=None, city=None):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT id FROM users WHERE id = ?', (user_id,))
            if not cursor.fetchone():
                cursor.execute('INSERT INTO users (id, name, city) VALUES (?, ?, ?)',
                             (user_id, name or '', city or ''))
            else:
                updates = []
                params = []
                if name is not None:
                    updates.append('name = ?')
                    params.append(name)
                if city is not None:
                    updates.append('city = ?')
                    params.append(city)
                if updates:
                    query = 'UPDATE users SET ' + ', '.join(updates) + ' WHERE id = ?'
                    params.append(user_id)
                    cursor.execute(query, params)
            conn.commit()

    def get_user(self, user_id=1):
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT name, city FROM users WHERE id = ?', (user_id,))
            return cursor.fetchone()

def print_welcome():
    print(f"""{COLORS['blue']}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
                 ü§ñ {COLORS['bold']}–ü–†–ò–í–ï–¢! –Ø –¢–í–û–ô –£–ú–ù–´–ô –ü–û–ú–û–©–ù–ò–ö-–ß–ê–¢-–ë–û–¢{COLORS['end']}{COLORS['blue']}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

                                üìå –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

   ‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —Ç–≤–æ—ë–º –∏–ª–∏ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ - "–ø–æ–≥–æ–¥–∞ –≤ (–≥–æ—Ä–æ–¥)"
   ‚Ä¢ –ó–∞–ø–æ–º–Ω–∏—Ç—å —Ç–≤–æ—ë –∏–º—è –∏ –≥–æ—Ä–æ–¥ - "(–∏–º—è) –∂–∏–≤—ë—Ç –≤ (–≥–æ—Ä–æ–¥)"
   ‚Ä¢ –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
   ‚Ä¢ –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ - "–ø–æ–∏—Å–∫ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
   ‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç - "–†–∞—Å—Å–∫–∞–∂–∏ —Ñ–∞–∫—Ç"
   ‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è - "–í–≤–µ–¥–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"

üõë                    {COLORS['green']}–í–≤–µ–¥–∏ "–≤—ã—Ö–æ–¥" —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä {COLORS['blue']}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
{COLORS['end']}""")
def calculate_expression(expr: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        expr = expr.replace('x', '*').replace('√ó', '*').replace('√∑', '/')
        result = eval(expr, {"__builtins__": {}}, {"__builtins__": {}})
        return f"{COLORS['green']}üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {expr} = {result}{COLORS['end']}"
    except (SyntaxError, ZeroDivisionError, ValueError):
        return f"{COLORS['red']}‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–ª–∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.{COLORS['end']}"

def search_internet(query: str) -> str:
    """–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Google"""
    try:
        url = f"https://www.google.com/search?q={quote(query)}"
        webbrowser.open(url)
        return f"{COLORS['blue']}üåç –í—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–∏—Å–∫ –≤ Google: '{query}'."
    except Exception as e:
        return f"{COLORS['red']}‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä: {str(e)}{COLORS['end']}"

async def analyze_mood(text: str) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º"""
    try:
        async with aiohttp.ClientSession() as session:
            params = {
                'q': text,
                'langpair': 'ru|en',
                'de': 'example@example.com'
            }
            async with session.get('https://api.mymemory.translated.net/get', params=params) as response:
                if response.status != 200:
                    return f"{COLORS['yellow']}ü§î –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞.{COLORS['end']}"
                data = await response.json()
                translated = data['responseData']['translatedText']

        analysis = TextBlob(translated).sentiment
        if analysis.polarity > 0.3:
            return f"{COLORS['green']}üòä –í—ã –∑–≤—É—á–∏—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ!{COLORS['end']}"
        elif analysis.polarity < -0.3:
            return f"{COLORS['blue']}üòî –ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å —Ç—Ä—É–¥–Ω—ã–π –¥–µ–Ω—å.{COLORS['end']}"
        return f"{COLORS['yellow']}üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.{COLORS['end']}"
    except Exception as e:
        return f"{COLORS['yellow']}ü§î –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {str(e)}{COLORS['end']}"

class WeatherAssistant:
    async def get_weather(self, city: str) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"http://api.openweathermap.org/data/2.5/weather?q={quote(city)}&appid={API_KEY}&units=metric&lang=ru"
                async with session.get(url) as response:
                    if response.status != 200:
                        return f"{COLORS['red']}‚ö† –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ API.{COLORS['end']}"
                    data = await response.json()
                    temp = data["main"]["temp"]
                    weather_desc = data["weather"][0]["description"]
                    return f"{COLORS['blue']}‚õÖ –í {city.capitalize()} —Å–µ–π—á–∞—Å {weather_desc}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C{COLORS['end']}"
        except Exception as e:
            return f"{COLORS['red']}‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {str(e)}{COLORS['end']}"

def log_conversation(user_input: str, bot_response: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–∞–π–ª"""
    try:
        with open("chat_log.txt", "a", encoding="utf-8") as f:
            f.write(f"[{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}]\n")
            f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_input}\n")
            f.write(f"–ë–æ—Ç: {bot_response}\n")
            f.write("-" * 60 + "\n")
    except Exception as e:
        print(f"{COLORS['red']}‚ö† –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}{COLORS['end']}")

async def process_user_input(user_input: str, current_category: str = None, db: Database = None) -> tuple:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_input = user_input.lower().strip()

    # –í—ã—Ö–æ–¥
    if user_input in ("–≤—ã—Ö–æ–¥", "—Å—Ç–æ–ø"):
        return None, f"{COLORS['blue']}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{COLORS['end']}", False

    morph = pymorphy2.MorphAnalyzer()
    def to_nominative(word: str) -> str:
        parses = morph.parse(word)
        for p in parses:
            if 'nomn' in p.tag:
                return p.word
        # –ï—Å–ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã –≤ nomn –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º normal_form
        return parses[0].normal_form

    user_match = re.match(r"(\w+)\s+–∂–∏–≤[—ë–µ]—Ç\s+–≤\s+(.+)", user_input, re.IGNORECASE)
    if user_match:
        name = user_match.group(1).capitalize()
        city_raw = user_match.group(2).rstrip('.,!?')
        city_parts = city_raw.split()
        city_lemmas = [to_nominative(word).capitalize() for word in city_parts]
        city = ' '.join(city_lemmas)

        await asyncio.to_thread(db.add_user, name, city)
        return None, f"{COLORS['green']}‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –∏–∑ {city} –¥–æ–±–∞–≤–ª–µ–Ω!{COLORS['end']}", False

    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if re.fullmatch(r"(—Å–ø–∏—Å–æ–∫|–ø–æ–∫–∞–∑–∞—Ç—å)\s+–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", user_input, re.IGNORECASE):
        users = await asyncio.to_thread(db.get_all_users)
        if not users:
            return None, f"{COLORS['yellow']}üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.{COLORS['end']}", False

        weather = WeatherAssistant()

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        async def get_user_data(user):
            user_id, name, city = user
            try:
                weather_info = await weather.get_weather(city)
                temp = re.search(r'—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ([\d-]+)', weather_info).group(1)
                desc = re.search(r'—Å–µ–π—á–∞—Å (.*?),', weather_info).group(1)
                return (user_id, name, city, f"{desc}, {temp}¬∞C")
            except:
                return (user_id, name, city, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        tasks = [get_user_data(user) for user in users]
        user_data = await asyncio.gather(*tasks)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        def format_users_table(user_data):
            headers = ["ID", "–ò–º—è", "–ì–æ—Ä–æ–¥", "–ü–æ–≥–æ–¥–∞"]
            col_widths = [4, 12, 18, 60]

            top_border = f"‚îå{'‚îÄ' * col_widths[0]}‚î¨{'‚îÄ' * col_widths[1]}‚î¨{'‚îÄ' * col_widths[2]}‚î¨{'‚îÄ' * col_widths[3]}‚îê"
            header_sep = f"‚îú{'‚îÄ' * col_widths[0]}‚îº{'‚îÄ' * col_widths[1]}‚îº{'‚îÄ' * col_widths[2]}‚îº{'‚îÄ' * col_widths[3]}‚î§"
            bottom_border = f"‚îî{'‚îÄ' * col_widths[0]}‚î¥{'‚îÄ' * col_widths[1]}‚î¥{'‚îÄ' * col_widths[2]}‚î¥{'‚îÄ' * col_widths[3]}‚îò"

            header_line = (
                f"‚îÇ{COLORS['bold']}{headers[0]:^{col_widths[0]}}{COLORS['end']}‚îÇ"
                f"{COLORS['bold']}{headers[1]:^{col_widths[1]}}{COLORS['end']}‚îÇ"
                f"{COLORS['bold']}{headers[2]:^{col_widths[2]}}{COLORS['end']}‚îÇ"
                f"{COLORS['bold']}{headers[3]:^{col_widths[3]}}{COLORS['end']}‚îÇ"
            )

            rows = []
            for data in user_data:
                row = (
                    f"‚îÇ{str(data[0]):^{col_widths[0]}}‚îÇ"
                    f"{data[1]:<{col_widths[1]}}‚îÇ"
                    f"{data[2]:<{col_widths[2]}}‚îÇ"
                    f"{data[3]:<{col_widths[3]}}‚îÇ"
                )
                rows.append(row)

            return "\n".join([top_border, header_line, header_sep] + rows + [bottom_border])

        table = format_users_table(user_data)
        return None, f"\n{COLORS['blue']}üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{table}{COLORS['end']}", False

    user_match = re.match(r"(\w+)\s+–∂–∏–≤[—ë–µ]—Ç\s+–≤\s+(.+)", user_input, re.IGNORECASE)
    if user_match:
        name = user_match.group(1).capitalize()
        city_raw = user_match.group(2).rstrip('.,!?')
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ
        city_parts = city_raw.split()
        city_lemmas = [morph.parse(word)[0].normal_form for word in city_parts]
        city = ' '.join([w.capitalize() for w in city_lemmas])

        await asyncio.to_thread(db.add_user, name, city)
        return None, f"{COLORS['green']}‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –∏–∑ {city} –¥–æ–±–∞–≤–ª–µ–Ω!{COLORS['end']}", False

        # –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ
    if re.fullmatch(r"–º–æ–∏ –¥–∞–Ω–Ω—ã–µ", user_input, re.IGNORECASE):
        user_data = await asyncio.to_thread(db.get_user)
        if user_data:
            name = user_data[0] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            city = user_data[1] or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            response = f"{COLORS['blue']}üìù –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {name}\n–ì–æ—Ä–æ–¥: {city}{COLORS['end']}"
        else:
            response = f"{COLORS['yellow']}‚ö† –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.{COLORS['end']}"
        return None, response, False

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥–æ–¥—ã
        weather_match = re.match(r"–ø–æ–≥–æ–¥–∞(?:\s+(?:–≤|–Ω–∞)\s+(.+))?$", user_input, re.IGNORECASE)
        if weather_match:
            city = weather_match.group(1)
            if not city:
                user_data = await asyncio.to_thread(db.get_user)
                city = user_data[1] if user_data else None
                if not city:
                    return None, f"{COLORS['red']}‚ö† –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π '–º–æ–π –≥–æ—Ä–æ–¥ ...'.{COLORS['end']}", False
            weather = WeatherAssistant()
            weather_result = await weather.get_weather(city)
            return None, weather_result, False

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —à—É—Ç–æ–∫
    if current_category:
        if user_input in JOKES:
            return None, random.choice(JOKES[user_input]), False
        return None, f"{COLORS['red']}üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∂–∏–≤–æ—Ç–Ω—ã–µ, —Ä–∞–±–æ—Ç–∞, —à–∫–æ–ª–∞.{COLORS['end']}", False



    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
    math_expr = re.search(r"([-+]?\d*\.?\d+\s*[+\-*/x√ó√∑]\s*[-+]?\d*\.?\d+)", user_input)
    if math_expr:
        return None, calculate_expression(math_expr.group(0)), False

    # –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    search_match = re.search(r"–ø–æ–∏—Å–∫\s+(.+)", user_input)
    if search_match:
        query = search_match.group(1)
        return None, search_internet(query), False

    # –ü–æ–≥–æ–¥–∞
    weather_match = re.search(r"–ø–æ–≥–æ–¥–∞\s+(?:–≤|–Ω–∞)\s+(.+)", user_input)
    if weather_match:
        city_raw = weather_match.group(1).rstrip('.,!?')
        city_parts = city_raw.split()
        city_lemmas = [to_nominative(word).capitalize() for word in city_parts]
        city = ' '.join(city_lemmas)
        weather = WeatherAssistant()
        weather_result = await weather.get_weather(city)
        return None, weather_result, False

    # –§–∞–∫—Ç—ã
    if "—à—É—Ç–∫" in user_input:
        return "fact_category", random.choice(RESPONSES[r"—Ä–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —à—É—Ç–∫—É"]), True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    for pattern, response in RESPONSES.items():
        if re.search(pattern, user_input):
            if callable(response):
                return None, response(), False
            elif isinstance(response, list):
                return None, random.choice(response), False
            return None, response, False

    # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ—Ä–∞–∑
    return None, await analyze_mood(user_input), False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    db = Database()
    db._create_table()  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print_welcome()
    current_category = None

    while True:
        try:
            user_input = await asyncio.to_thread(input, f"{COLORS['bold']}–í—ã:{COLORS['end']} ")
            new_category, response, set_category = await process_user_input(user_input, current_category, db)

            if response is None:
                break

            print(f"\n{COLORS['blue']}–ë–æ—Ç:{COLORS['end']} {response}\n")
            log_conversation(user_input, response)

            current_category = new_category if set_category else None

        except (KeyboardInterrupt, asyncio.CancelledError):
            print(f"\n{COLORS['red']}üõë –î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω.{COLORS['end']}")
            break
            break
        except Exception as e:
            print(f"{COLORS['red']}‚ö† –û—à–∏–±–∫–∞: {str(e)}{COLORS['end']}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"\n{COLORS['red']}üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.{COLORS['end']}")